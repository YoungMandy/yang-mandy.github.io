import{_ as e}from"./PageHeader.vue_vue_type_script_setup_true_lang-e06f1af6.js";import{d as r,c as t,e as o,U as s,g as i}from"./index-3ab21c41.js";const c="/assets/chrome-architecture-a19cc507.webp",m="/assets/chrome-furture-1-36a24978.webp",h=s('<h2>Chrome采用的是多进程架构</h2><p>各个进程之间通过(IPC)进行通信</p><img src="'+c+'" width="600" alt="chrome architecture image"><h3>各个进程的作用</h3><ul><li><strong>浏览器主进程</strong>,主要负责界面显示(渲染进程渲染好图片给到主进程)、用户交互、子进程管理、同时提供存储功能</li><li><strong>渲染进程</strong>,核心人物是把HTML、CSS、Javascript转换成用户可交互的网页,排版引擎Blink和Javascript引擎V8都是运行在该进程里。默认情况下,渲染进程都是运行在沙箱里</li><li><strong>GPU进程</strong>,其实一开始是没有GPU进程的,它的出现最初是为了实现3D CSS效果,只是随后网页、Chrome的UI界面都用GPU来绘制,这使得GPU成为浏览器的普遍需求。最后,Chrome也在其架构中加入了GPU进程</li><li><strong>网络进程</strong>,主要负责网页的资源加载</li><li><strong>插件进程</strong>, 主要负责插件的运行,为了插件的崩溃不影响到页面,用到了沙箱来隔离</li></ul><h3>浏览器沙箱</h3><p>浏览器沙盒的实现原理主要是通过系统内核提供的安全机制,将浏览器进程隔离开来，从而实现每个浏览器进程间相互独立，不会互相影响。当一个进程崩溃时，其它进程能够继续正常运行。同时，浏览器沙盒技术可以<mark>限制</mark>某个进程的资源使用,包括内存、CPU、磁盘等,从而避免恶意代码利用相应的资源导致整个系统出现问题</p><h3>谷歌浏览器的未来架构</h3><p>在2016年,谷歌官方团队使用“面向服务的架构(Services Oriented Architecture,简称SOA)”的思想重构设计了新的Chrome架构。原来的各模块会被重构成独立的服务,每个服务都可以在独立的进程中进行,访问服务必须使用定义好的接口,通过IPC来通信,从而构建一个更内聚、松耦合、易于维护和扩展的系统</p><img src="'+m+'" width="600" alt="Chrome面向服务架构进程模型图"><p>Chrome最终要把UI、数据库、文件、设备、网络等模块重构为基础服务,类似操作系统底层服务。目前,Chrome正从老的架构往服务化架构过渡阶段,这将是一个漫长的迭代过程。</p>',11),g=r({__name:"Architecture",setup(a){return(n,l)=>(i(),t("section",null,[o(e,{title:"浏览器架构(Chrome)",description:"因为微软的Edge、Google以及国内的大部分浏览器都是基于Chromium二次开发而来,而Chrome又是Google官方的发行版,特性和Chromium基本一致,只存在产品层面的差异,Chrome又是市场占有率最高的浏览器,所以以Chrome作为了解浏览器架构的入口"}),h]))}});export{g as default};
